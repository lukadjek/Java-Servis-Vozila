/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.MaskFormatter;
import osnovneklase.ModeliAudi;
import osnovneklase.ModeliVW;
import osnovneklase.Vozila;
import povezivanjesabazom.Kontroler;

/**
 *
 * @author lucca
 */
public class _2_PrijemNovogVozilaUServis extends javax.swing.JDialog {

    private final ImageIcon pozadina_AUDI;
    private final ImageIcon pozadina_VW;
    private final ImageIcon info_simbol;
    private final Icon icon;

    /**
     * Creates new form _2_PrijemNovogVozilaUServis
     */
    public _2_PrijemNovogVozilaUServis(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.pozadina_AUDI = new ImageIcon("src/slike/audi-logo.gif");
        this.pozadina_VW = new ImageIcon("src/slike/vw-logo.gif");
        this.info_simbol = new ImageIcon("src/slike/icon.png");
        this.icon = new ImageIcon("src/slike/small-car-icon.png");
        initComponents();
        odrediVelicinuZaCB();
        odrediMarkuVozila();
        ucitajSveModele();
        odrediMinDatum();
        odrediVremeIDatumPostaviDugme();
        dodajHoverEfekatNaPotvrdiDugmad();
        sakrijPocetnaPolja();
        sakrijDodatnaPolja();
    }

    _2_PrijemNovogVozilaUServis(_3_SvaVozila aThis) {
        super(aThis);
        this.pozadina_AUDI = new ImageIcon("src/slike/audi-logo.gif");
        this.pozadina_VW = new ImageIcon("src/slike/vw-logo.gif");
        this.info_simbol = new ImageIcon("src/slike/icon.png");
        this.icon = new ImageIcon("src/slike/small-car-icon.png");
        initComponents();
        odrediVelicinuZaCB();
        odrediMarkuVozila();
        ucitajSveModele();
        odrediMinDatum();
        odrediVremeIDatumPostaviDugme();
        dodajHoverEfekatNaPotvrdiDugmad();
        sakrijPocetnaPolja();
        sakrijDodatnaPolja();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lblSlika = new javax.swing.JLabel();
        lblMarkaVozila = new javax.swing.JLabel();
        lblModelAudi = new javax.swing.JLabel();
        lblModelVW = new javax.swing.JLabel();
        cbMarkaVozila = new javax.swing.JComboBox<>();
        cbModelAudi = new javax.swing.JComboBox();
        cbModelVW = new javax.swing.JComboBox();
        lblVremePrijema = new javax.swing.JLabel();
        cbVremePrijema = new javax.swing.JComboBox();
        lblPrikaziMarkuOvde = new javax.swing.JLabel();
        lblPrikaziModelOvde = new javax.swing.JLabel();
        btnPotvrdi = new javax.swing.JButton();
        lblDatumPrijema = new javax.swing.JLabel();
        datumPiker = new com.toedter.calendar.JDateChooser();
        lblPodaciOVozilu = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        lblKilometraza = new javax.swing.JLabel();
        txtKilometraza = new javax.swing.JTextField();
        lblGreskaKilometraza = new javax.swing.JLabel();
        lblBrojSasije = new javax.swing.JLabel();
        txtBrojSasije = new javax.swing.JTextField();
        lblGreskaBrojSasije = new javax.swing.JLabel();
        lblRegistarskaOznaka = new javax.swing.JLabel();
        lblGreskaRegistarskaOznaka = new javax.swing.JLabel();
        txtRegistarskaOznaka = new javax.swing.JFormattedTextField();
        lblRedovneServisneUsluge = new javax.swing.JLabel();
        checkBoxServisZameneUlja = new javax.swing.JCheckBox();
        checkBoxInspekcijskiServis = new javax.swing.JCheckBox();
        checkBoxVelikiServis = new javax.swing.JCheckBox();
        lblDodatneServisneUsluge = new javax.swing.JLabel();
        btnOtvoriListu = new javax.swing.JToggleButton();
        panelDodatneServisneUsluge = new javax.swing.JPanel();
        radioButtonZamenaKocioneTecnosti = new javax.swing.JRadioButton();
        radioButtonZamenaPneumatika = new javax.swing.JRadioButton();
        radioButtonKontrolaRadaMotora = new javax.swing.JRadioButton();
        radioButtonCentriranjeTrapa = new javax.swing.JRadioButton();
        radioButtonProveraAkumulatora = new javax.swing.JRadioButton();
        radioButtonPopravkaKaroserije = new javax.swing.JRadioButton();
        lblDodatneNapomene = new javax.swing.JLabel();
        panelDodatneNapomene = new javax.swing.JPanel();
        jSPDodatneNapomene = new javax.swing.JScrollPane();
        txtAreaDodatneNapomene = new javax.swing.JTextArea();
        lblBrojUnetihKaraktera = new javax.swing.JLabel();
        btnPotvrdiSve = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("***PRIJEM NOVOG VOZILA U SERVIS***");
        setBackground(new java.awt.Color(204, 204, 204));

        jPanel1.setPreferredSize(new java.awt.Dimension(654, 1018));

        lblSlika.setText("lblSlika");

        lblMarkaVozila.setText("Marka vozila:");

        lblModelAudi.setText("Model Audi:");

        lblModelVW.setText("Model VW:");

        cbMarkaVozila.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Audi", "VW" }));
        cbMarkaVozila.setSelectedIndex(-1);

        cbModelAudi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Izaberite model..." }));

        cbModelVW.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Izaberite model..." }));

        lblVremePrijema.setText("Vreme prijema:");

        cbVremePrijema.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "09 : 00", "10 : 00", "11 : 00", "12 : 00", "13 : 00", "14 : 00", "15 : 00", "16 : 00" }));
        cbVremePrijema.setSelectedIndex(-1);

        lblPrikaziMarkuOvde.setForeground(new java.awt.Color(0, 153, 204));
        lblPrikaziMarkuOvde.setText("lblPrikaziMarkuOvde");

        lblPrikaziModelOvde.setForeground(new java.awt.Color(0, 153, 204));
        lblPrikaziModelOvde.setText("lblPrikaziModelOvde");

        btnPotvrdi.setText("Potvrdi");
        btnPotvrdi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPotvrdi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPotvrdiActionPerformed(evt);
            }
        });

        lblDatumPrijema.setText("Datum prijema:");

        datumPiker.setDateFormatString("dd.MM.yyyy");
        datumPiker.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N

        lblPodaciOVozilu.setFont(new java.awt.Font("Andale Mono", 1, 16)); // NOI18N
        lblPodaciOVozilu.setForeground(new java.awt.Color(0, 153, 204));
        lblPodaciOVozilu.setText("PODACI O VOZILU");

        slider.setFont(new java.awt.Font("Lucida Grande", 2, 8)); // NOI18N
        slider.setMajorTickSpacing(10);
        slider.setMaximum(200);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setToolTipText("Kilometraza (priblizna)");
        slider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        lblKilometraza.setText("*Kilometraza (priblizna):");

        txtKilometraza.setText("50000");
        txtKilometraza.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtKilometrazaKeyTyped(evt);
            }
        });

        lblGreskaKilometraza.setText("greskaKilometraza");

        lblBrojSasije.setText("*Broj sasije (poslednjih 7):");

        txtBrojSasije.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBrojSasijeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBrojSasijeKeyTyped(evt);
            }
        });

        lblGreskaBrojSasije.setText("greskaBrojSasije");

        lblRegistarskaOznaka.setText("*Registarska oznaka:");

        lblGreskaRegistarskaOznaka.setText("greskaRegistarskaOznaka");

        txtRegistarskaOznaka.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRegistarskaOznakaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRegistarskaOznakaFocusLost(evt);
            }
        });

        lblRedovneServisneUsluge.setFont(new java.awt.Font("Andale Mono", 1, 16)); // NOI18N
        lblRedovneServisneUsluge.setForeground(new java.awt.Color(0, 153, 204));
        lblRedovneServisneUsluge.setText("REDOVNE SERVISNE USLUGE");

        checkBoxServisZameneUlja.setText("Servis zamene ulja");
        checkBoxServisZameneUlja.setToolTipText("<html>\nSvakih <strong>15.000km ili nakon godinu dana (šta pre nastupi)</strong>. <br> \nU servis je uključena: \n<ul style=\"list-style-type:disc;\">\n<li><i>zamena ulja</i></li>\n<li><i>zamena filtera ulja</i></li>\n<li><i>dvanaestomesečna besplatna Garancija mobilnosti</i> </li>\n</ul> \nDodatno ćemo proveriti sve <strong>habajuće delove na Vašem vozilu</strong>.\n</html>");
        checkBoxServisZameneUlja.setBorderPainted(true);
        checkBoxServisZameneUlja.setBorderPaintedFlat(true);
        checkBoxServisZameneUlja.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkBoxInspekcijskiServis.setText("Inspekcijski servis");
        checkBoxInspekcijskiServis.setToolTipText("<html>\nSvakih <strong>30.000km ili nakon dve godine (šta pre nastupi)</strong>. <br> \nObuhvata zamenu:\n<ul style=\"list-style-type:disc;\">\n<li><i>filtera vazduha motora</i></li> \n<li><i>filtera goriva</i></li>\n<li><i>filtera polena</i></li>\n<li><i>inspekciju stanja pojedinih sistema na vozilu</i></li>\n</ul>\nUključuje <strong>očitavanje stanja procesora vozila</strong>.\n</html>\n\n");
        checkBoxInspekcijskiServis.setBorderPainted(true);
        checkBoxInspekcijskiServis.setBorderPaintedFlat(true);
        checkBoxInspekcijskiServis.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        checkBoxVelikiServis.setText("Veliki servis");
        checkBoxVelikiServis.setToolTipText("<html>\nSvakih <strong>75.000km ili nakon pet godina (šta pre nastupi)</strong>. <br> \nObuhvata:\n<ul style=\"list-style-type:disc;\">\n<li><i>servis zamene ulja</i></li>\n<li><i>inspekcijski servis</i></li>\n<li><i>zamena seta za zupčenje</i></li>\n</ul>\n</html>");
        checkBoxVelikiServis.setBorderPainted(true);
        checkBoxVelikiServis.setBorderPaintedFlat(true);
        checkBoxVelikiServis.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lblDodatneServisneUsluge.setFont(new java.awt.Font("Andale Mono", 1, 16)); // NOI18N
        lblDodatneServisneUsluge.setForeground(new java.awt.Color(0, 153, 204));
        lblDodatneServisneUsluge.setText("DODATNE SERVISNE USLUGE");

        btnOtvoriListu.setText("Otvori listu");
        btnOtvoriListu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOtvoriListu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtvoriListuActionPerformed(evt);
            }
        });

        panelDodatneServisneUsluge.setBackground(new java.awt.Color(0, 153, 204));
        panelDodatneServisneUsluge.setForeground(new java.awt.Color(255, 255, 255));

        radioButtonZamenaKocioneTecnosti.setForeground(new java.awt.Color(255, 255, 255));
        radioButtonZamenaKocioneTecnosti.setText("Zamena kocione tecnosti");

        radioButtonZamenaPneumatika.setForeground(new java.awt.Color(255, 255, 255));
        radioButtonZamenaPneumatika.setText("Zamena pneumatika");

        radioButtonKontrolaRadaMotora.setForeground(new java.awt.Color(255, 255, 255));
        radioButtonKontrolaRadaMotora.setText("Kontrola rada motora");

        radioButtonCentriranjeTrapa.setForeground(new java.awt.Color(255, 255, 255));
        radioButtonCentriranjeTrapa.setText("Centriranje trapa");

        radioButtonProveraAkumulatora.setForeground(new java.awt.Color(255, 255, 255));
        radioButtonProveraAkumulatora.setText("Provera akumulatora");

        radioButtonPopravkaKaroserije.setForeground(new java.awt.Color(255, 255, 255));
        radioButtonPopravkaKaroserije.setText("Popravka karoserije");

        javax.swing.GroupLayout panelDodatneServisneUslugeLayout = new javax.swing.GroupLayout(panelDodatneServisneUsluge);
        panelDodatneServisneUsluge.setLayout(panelDodatneServisneUslugeLayout);
        panelDodatneServisneUslugeLayout.setHorizontalGroup(
            panelDodatneServisneUslugeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDodatneServisneUslugeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDodatneServisneUslugeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioButtonZamenaKocioneTecnosti)
                    .addComponent(radioButtonCentriranjeTrapa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelDodatneServisneUslugeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioButtonProveraAkumulatora)
                    .addComponent(radioButtonZamenaPneumatika))
                .addGap(18, 18, 18)
                .addGroup(panelDodatneServisneUslugeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioButtonKontrolaRadaMotora)
                    .addComponent(radioButtonPopravkaKaroserije))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelDodatneServisneUslugeLayout.setVerticalGroup(
            panelDodatneServisneUslugeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDodatneServisneUslugeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDodatneServisneUslugeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButtonZamenaKocioneTecnosti)
                    .addComponent(radioButtonZamenaPneumatika)
                    .addComponent(radioButtonKontrolaRadaMotora))
                .addGap(18, 18, 18)
                .addGroup(panelDodatneServisneUslugeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButtonCentriranjeTrapa)
                    .addComponent(radioButtonProveraAkumulatora)
                    .addComponent(radioButtonPopravkaKaroserije))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblDodatneNapomene.setFont(new java.awt.Font("Andale Mono", 1, 16)); // NOI18N
        lblDodatneNapomene.setForeground(new java.awt.Color(0, 153, 204));
        lblDodatneNapomene.setText("DODATNE NAPOMENE");

        txtAreaDodatneNapomene.setColumns(5);
        txtAreaDodatneNapomene.setLineWrap(true);
        txtAreaDodatneNapomene.setRows(5);
        txtAreaDodatneNapomene.setText("Napomene za servisere...");
        txtAreaDodatneNapomene.setCaretColor(new java.awt.Color(0, 153, 204));
        txtAreaDodatneNapomene.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAreaDodatneNapomene.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAreaDodatneNapomeneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAreaDodatneNapomeneFocusLost(evt);
            }
        });
        txtAreaDodatneNapomene.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAreaDodatneNapomeneKeyTyped(evt);
            }
        });
        jSPDodatneNapomene.setViewportView(txtAreaDodatneNapomene);

        lblBrojUnetihKaraktera.setText("lblBrojUnetihKaraktera");

        javax.swing.GroupLayout panelDodatneNapomeneLayout = new javax.swing.GroupLayout(panelDodatneNapomene);
        panelDodatneNapomene.setLayout(panelDodatneNapomeneLayout);
        panelDodatneNapomeneLayout.setHorizontalGroup(
            panelDodatneNapomeneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDodatneNapomeneLayout.createSequentialGroup()
                .addComponent(jSPDodatneNapomene, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBrojUnetihKaraktera)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelDodatneNapomeneLayout.setVerticalGroup(
            panelDodatneNapomeneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDodatneNapomeneLayout.createSequentialGroup()
                .addGroup(panelDodatneNapomeneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblBrojUnetihKaraktera)
                    .addComponent(jSPDodatneNapomene, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        btnPotvrdiSve.setText("Potvrdi");
        btnPotvrdiSve.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPotvrdiSve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPotvrdiSveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblMarkaVozila)
                                            .addComponent(lblModelAudi)
                                            .addComponent(lblModelVW))
                                        .addGap(0, 0, 0)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(cbModelVW, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbModelAudi, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbMarkaVozila, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblSlika)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblPrikaziMarkuOvde)))
                                .addGap(7, 7, 7)
                                .addComponent(lblPrikaziModelOvde))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(checkBoxServisZameneUlja)
                                .addGap(45, 45, 45)
                                .addComponent(checkBoxInspekcijskiServis)
                                .addGap(43, 43, 43)
                                .addComponent(checkBoxVelikiServis))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblVremePrijema)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbVremePrijema, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblDatumPrijema)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(datumPiker, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(103, 103, 103)
                                .addComponent(btnPotvrdi))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(148, 148, 148)
                            .addComponent(lblPodaciOVozilu))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(lblKilometraza)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtKilometraza, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblBrojSasije)
                                        .addComponent(lblRegistarskaOznaka))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtBrojSasije)
                                        .addComponent(txtRegistarskaOznaka))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblGreskaKilometraza)
                                .addComponent(lblGreskaBrojSasije)
                                .addComponent(lblGreskaRegistarskaOznaka)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(152, 152, 152)
                            .addComponent(lblRedovneServisneUsluge))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(153, 153, 153)
                            .addComponent(lblDodatneServisneUsluge))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(190, 190, 190)
                            .addComponent(btnOtvoriListu))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(panelDodatneServisneUsluge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(150, 150, 150)
                            .addComponent(lblDodatneNapomene))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(panelDodatneNapomene, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 90, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPotvrdiSve)
                .addGap(227, 227, 227))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblSlika)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMarkaVozila)
                            .addComponent(cbMarkaVozila, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbModelAudi)
                            .addComponent(lblModelAudi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbModelVW)
                            .addComponent(lblModelVW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblVremePrijema)
                            .addComponent(cbVremePrijema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(datumPiker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDatumPrijema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPrikaziMarkuOvde)
                        .addComponent(lblPrikaziModelOvde))
                    .addComponent(btnPotvrdi, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(lblPodaciOVozilu)
                .addGap(18, 18, 18)
                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKilometraza)
                    .addComponent(txtKilometraza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGreskaKilometraza))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBrojSasije)
                    .addComponent(txtBrojSasije, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGreskaBrojSasije))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegistarskaOznaka)
                    .addComponent(lblGreskaRegistarskaOznaka)
                    .addComponent(txtRegistarskaOznaka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(lblRedovneServisneUsluge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxServisZameneUlja)
                    .addComponent(checkBoxInspekcijskiServis)
                    .addComponent(checkBoxVelikiServis))
                .addGap(18, 18, 18)
                .addComponent(lblDodatneServisneUsluge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnOtvoriListu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDodatneServisneUsluge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDodatneNapomene)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDodatneNapomene, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPotvrdiSve)
                .addContainerGap(249, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPotvrdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPotvrdiActionPerformed
        boolean poljaPravilnoPopunjena = true;
        StringBuilder errorMessage = new StringBuilder();
        int redniBrojGreske = 1;

        if (cbModelAudi.getSelectedIndex() == 0 && cbModelVW.getSelectedIndex() == 0) {
            errorMessage.append(redniBrojGreske).append(".").append(" Morate izabrati jedan model vozila!\n");
            redniBrojGreske++;
            poljaPravilnoPopunjena = false;
        }

        if (cbModelAudi.getSelectedIndex() != 0 && cbModelVW.getSelectedIndex() != 0) {
            errorMessage.append(redniBrojGreske).append(".").append(" Ne mozete izabrati 2 marke vozila!\n");
            cbModelAudi.setSelectedIndex(0);
            cbModelVW.setSelectedIndex(0);
            redniBrojGreske++;
            poljaPravilnoPopunjena = false;
        }

        if (cbVremePrijema.getSelectedIndex() == -1) {
            errorMessage.append(redniBrojGreske).append(".").append(" Morate izabrati vreme prijema!\n");
            redniBrojGreske++;
            poljaPravilnoPopunjena = false;
        }

        if (datumPiker.getDate() == null) {
            errorMessage.append(redniBrojGreske).append(".").append(" Morate izabrati datum prijema (pocev od danasnjeg datuma)!\n");
            redniBrojGreske++;
            poljaPravilnoPopunjena = false;
        }

        if (cbVremePrijema.getSelectedItem() != null) {

            Date vreme = new Date();
            SimpleDateFormat vremeFormat = new SimpleDateFormat("HH : mm");
            vremeFormat.format(vreme);

            SimpleDateFormat sdff = new SimpleDateFormat("dd.MM.yyyy");

            String statusDT = sdff.format(datumPiker.getJCalendar().getDate());
            LocalDate date = LocalDate.parse(statusDT, DateTimeFormatter.ofPattern("dd.MM.yyyy"));


            try {
                if (vremeFormat.parse(vremeFormat.format(vreme)).after(vremeFormat.parse(cbVremePrijema.getSelectedItem().toString())) && (date.isEqual(LocalDate.now())) && (datumPiker.getDate() != null)) {
                    errorMessage.append(redniBrojGreske).append(".").append(" Izabrano vreme je za danasnji dan vec proslo!\n");
                    redniBrojGreske++;
                    poljaPravilnoPopunjena = false;
                }
            } catch (ParseException | NullPointerException ex) {
                Logger.getLogger(_2_PrijemNovogVozilaUServis.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (poljaPravilnoPopunjena == false) {
            JOptionPane.showMessageDialog(this, errorMessage, "Greska pri obradi zahteva", JOptionPane.ERROR_MESSAGE);
        }

        Object options[] = {"Ne, vrati se nazad", "Da, nastavi dalje"};


        if (poljaPravilnoPopunjena == true) {
            {
                int dialog = JOptionPane.showOptionDialog(rootPane, "Nastavi dalje ka obradi?", "Potvrdi", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);

                if (dialog == JOptionPane.NO_OPTION) {

                    lblPrikaziMarkuOvde.setVisible(true);
                    lblPrikaziModelOvde.setVisible(true);

                    lblPrikaziMarkuOvde.setText(cbMarkaVozila.getSelectedItem().toString().toUpperCase());

                    if (cbModelVW.getSelectedIndex() == 0) {
                        lblPrikaziModelOvde.setText(cbModelAudi.getSelectedItem().toString().toUpperCase());
                    } else {
                        lblPrikaziModelOvde.setText(cbModelVW.getSelectedItem().toString().toUpperCase());
                    }

                    cbMarkaVozila.setEnabled(false);
                    cbModelAudi.setEnabled(false);
                    cbModelVW.setEnabled(false);
                    cbVremePrijema.setEnabled(false);
                    datumPiker.setEnabled(false);
                    btnPotvrdi.setVisible(false);

                    prikaziDodatnaPolja();

                }
            }

        }
    }//GEN-LAST:event_btnPotvrdiActionPerformed

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        txtKilometraza.setText(Integer.toString(slider.getValue() * 1000));
        txtKilometraza.setForeground(Color.black);
        lblGreskaKilometraza.setVisible(false);
    }//GEN-LAST:event_sliderStateChanged

    private void txtKilometrazaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKilometrazaKeyTyped

        if (Character.isAlphabetic(evt.getKeyChar()) || Character.isSpaceChar(evt.getKeyChar())) {
            lblGreskaKilometraza.setVisible(true);
            lblGreskaKilometraza.setText("Samo brojevi smeju da se unose!");
            lblGreskaKilometraza.setForeground(Color.red);
            txtKilometraza.setForeground(Color.red);
            evt.consume();
        } else {
            if (txtKilometraza.getText().length() >= 6) {
                lblGreskaKilometraza.setVisible(true);
                lblGreskaKilometraza.setText("Max. 6  brojeva je dozvoljeno uneti!");
                lblGreskaKilometraza.setForeground(Color.red);
                txtKilometraza.setForeground(Color.red);
                evt.consume();
            } else {
                lblGreskaKilometraza.setText("");
                txtKilometraza.setForeground(Color.black);
            }
        }


    }//GEN-LAST:event_txtKilometrazaKeyTyped

    private void txtBrojSasijeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBrojSasijeKeyReleased
        int pozicija = txtBrojSasije.getCaretPosition();

        txtBrojSasije.setText(txtBrojSasije.getText().toUpperCase());
        txtBrojSasije.setCaretPosition(pozicija);


    }//GEN-LAST:event_txtBrojSasijeKeyReleased

    private void txtBrojSasijeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBrojSasijeKeyTyped

        if (txtBrojSasije.getText().length() >= 7) {
            lblGreskaBrojSasije.setVisible(true);
            lblGreskaBrojSasije.setText("Max. 7  brojeva je dozvoljeno uneti!");
            lblGreskaBrojSasije.setForeground(Color.red);
            evt.consume();
        } else if (Character.isSpaceChar(evt.getKeyChar())) {
            lblGreskaBrojSasije.setVisible(true);
            lblGreskaBrojSasije.setText("Unos razmaka je zabranjen!");
            lblGreskaBrojSasije.setForeground(Color.red);
            evt.consume();
        } else {
            lblGreskaBrojSasije.setText("");
        }

    }//GEN-LAST:event_txtBrojSasijeKeyTyped

    private void txtRegistarskaOznakaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRegistarskaOznakaFocusGained

        String regex = "_";

        if (txtRegistarskaOznaka.getText().contains(regex)) {

            lblGreskaRegistarskaOznaka.setVisible(true);
            lblGreskaRegistarskaOznaka.setForeground(Color.red);
            lblGreskaRegistarskaOznaka.setText("primer: BG-773-RE");
        } else {
            lblGreskaRegistarskaOznaka.setVisible(false);

        }
    }//GEN-LAST:event_txtRegistarskaOznakaFocusGained

    private void txtRegistarskaOznakaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRegistarskaOznakaFocusLost
        String regex = "_";
        if (txtRegistarskaOznaka.getText().contains(regex)) {
            lblGreskaRegistarskaOznaka.setVisible(true);
        } else {
            lblGreskaRegistarskaOznaka.setVisible(false);
        }

        txtRegistarskaOznaka.setText(txtRegistarskaOznaka.getText().toUpperCase());
    }//GEN-LAST:event_txtRegistarskaOznakaFocusLost

    private void btnOtvoriListuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtvoriListuActionPerformed
        if (btnOtvoriListu.getText().equals("Otvori listu")) {
            btnOtvoriListu.setText("Sakrij listu");
            panelDodatneServisneUsluge.setVisible(true);
        } else {
            btnOtvoriListu.setText("Otvori listu");
            panelDodatneServisneUsluge.setVisible(false);
        }
    }//GEN-LAST:event_btnOtvoriListuActionPerformed

    private void txtAreaDodatneNapomeneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaDodatneNapomeneKeyTyped
        if (txtAreaDodatneNapomene.getText().length() >= 160) {
            lblBrojUnetihKaraktera.setForeground(Color.red);
            evt.consume();
        } else {
            lblBrojUnetihKaraktera.setForeground(Color.black);
        }
    }//GEN-LAST:event_txtAreaDodatneNapomeneKeyTyped

    private void txtAreaDodatneNapomeneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAreaDodatneNapomeneFocusGained

        jSPDodatneNapomene.setPreferredSize(new Dimension(101, 140));

        if (txtAreaDodatneNapomene.getText().equals("Napomene za servisere...")) {
            txtAreaDodatneNapomene.setForeground(Color.black);
            txtAreaDodatneNapomene.setText("");
            lblBrojUnetihKaraktera.setText("0 / 160");

        }
    }//GEN-LAST:event_txtAreaDodatneNapomeneFocusGained

    private void txtAreaDodatneNapomeneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAreaDodatneNapomeneFocusLost

        jSPDodatneNapomene.setPreferredSize(new Dimension(101, 80));

        if (txtAreaDodatneNapomene.getText().isBlank()) {
            txtAreaDodatneNapomene.setText("Napomene za servisere...");
            txtAreaDodatneNapomene.setForeground(Color.gray);
            lblBrojUnetihKaraktera.setText("");

        } else {
            txtAreaDodatneNapomene.setForeground(Color.black);
        }

    }//GEN-LAST:event_txtAreaDodatneNapomeneFocusLost

    private void btnPotvrdiSveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPotvrdiSveActionPerformed

        boolean svaPoljaPopunjena = true;
        StringBuffer errorMessage = new StringBuffer();

        if (txtKilometraza.getText().length() == 0 || txtKilometraza.getText().startsWith("0")) {
            errorMessage.append("Morate uneti kilometrazu! \n");
            svaPoljaPopunjena = false;
        }

        if (txtBrojSasije.getText().length() == 0 || txtBrojSasije.getText().length() != 7) {
            errorMessage.append("Morate uneti broj sasije (ukupno 7 znakova)! \n");
            svaPoljaPopunjena = false;
        }
        
        if ( !txtBrojSasije.getText().matches("[a-zA-Z0-9 ]*") ) {
            errorMessage.append("Broj sasije ne sme sadrzati specijalne karaktere! \n");
            svaPoljaPopunjena = false;  
        }

        String regex = "_";
        if (txtRegistarskaOznaka.getText().contains(regex)) {
            errorMessage.append("Morate uneti registarsku oznaku u ispravnom formatu! \n");
            svaPoljaPopunjena = false;
        }

        if ((!checkBoxServisZameneUlja.isSelected()) && (!checkBoxInspekcijskiServis.isSelected()) && (!checkBoxVelikiServis.isSelected())) {
            errorMessage.append("Morate izabrati makar jednu redovnu servisnu uslugu! \n");
            svaPoljaPopunjena = false;
        }

        if ((checkBoxVelikiServis.isSelected()) && (checkBoxServisZameneUlja.isSelected() || checkBoxInspekcijskiServis.isSelected())) {
            errorMessage.append("Veliki servis vec obuhvata servis zamene ulja, kao i inspekcijski servis! \n");
            checkBoxServisZameneUlja.setSelected(false);
            checkBoxInspekcijskiServis.setSelected(false);
            checkBoxVelikiServis.grabFocus();
            svaPoljaPopunjena = false;
        }

        if (!btnOtvoriListu.getText().equals("Sakrij listu") || radioButtonCentriranjeTrapa.isSelected() || radioButtonKontrolaRadaMotora.isSelected() || radioButtonPopravkaKaroserije.isSelected() || radioButtonProveraAkumulatora.isSelected() || radioButtonZamenaKocioneTecnosti.isSelected() || radioButtonZamenaPneumatika.isSelected()) {
        } else {
            errorMessage.append("Morate izabrati makar jednu dodatnu servisnu uslugu ili zatvoriti panel! \n");
            svaPoljaPopunjena = false;
        }

        if (svaPoljaPopunjena) {

            Vozila sacuvajOvoVozilo = new Vozila();

            int redniBrojReda = 0;
            sacuvajOvoVozilo.setID(redniBrojReda);
            redniBrojReda++;

            sacuvajOvoVozilo.setMarkaVozila(cbMarkaVozila.getSelectedItem().toString());

            if (cbMarkaVozila.getSelectedItem().equals("Audi")) {
                sacuvajOvoVozilo.setModelVozila(cbModelAudi.getSelectedItem().toString());
            } else {
                sacuvajOvoVozilo.setModelVozila(cbModelVW.getSelectedItem().toString());
            }

            sacuvajOvoVozilo.setVreme(cbVremePrijema.getSelectedItem().toString());

            sacuvajOvoVozilo.setDatum(datumPiker.getDate());

            boolean daLiJeSveOK = true;
            try {
                sacuvajOvoVozilo.setKilometraza(Integer.parseInt(txtKilometraza.getText()));

                if (Integer.parseInt(txtKilometraza.getText()) < 1000) {
                    JOptionPane.showMessageDialog(this, "Morate uneti kilometrazu (minumum 1.000, maksimum 999.999)!", "Greska", JOptionPane.ERROR_MESSAGE);
                    daLiJeSveOK = false;
                }

            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this, "Polje kilometraza ne sme sadrzati specijalne karaktere!", "Greska", JOptionPane.ERROR_MESSAGE);
                daLiJeSveOK = false;
            }

            sacuvajOvoVozilo.setBrojSasije(txtBrojSasije.getText());

            sacuvajOvoVozilo.setRegistarskaOznaka(txtRegistarskaOznaka.getText());

            StringBuffer redovnaServisnaUsluga = new StringBuffer();

            if (checkBoxServisZameneUlja.isSelected()) {
                sacuvajOvoVozilo.setRedovneServisneUsluge(redovnaServisnaUsluga.append(checkBoxServisZameneUlja.getText()).append(", ").toString());
            }

            if (checkBoxInspekcijskiServis.isSelected()) {
                sacuvajOvoVozilo.setRedovneServisneUsluge(redovnaServisnaUsluga.append(checkBoxInspekcijskiServis.getText()).append(", ").toString());
            }

            if (checkBoxVelikiServis.isSelected()) {
                sacuvajOvoVozilo.setRedovneServisneUsluge(checkBoxVelikiServis.getText());
            }

            StringBuffer dodatnaServisnaUsluga = new StringBuffer();

            if (btnOtvoriListu.getText().equals("Sakrij listu") || radioButtonCentriranjeTrapa.isSelected() || radioButtonKontrolaRadaMotora.isSelected() || radioButtonPopravkaKaroserije.isSelected() || radioButtonProveraAkumulatora.isSelected() || radioButtonZamenaKocioneTecnosti.isSelected() || radioButtonZamenaPneumatika.isSelected()) {

                if (radioButtonZamenaKocioneTecnosti.isSelected()) {
                    sacuvajOvoVozilo.setDodatneServisneUsluge(dodatnaServisnaUsluga.append(radioButtonZamenaKocioneTecnosti.getText()).append(" | ").toString());
                }
                if (radioButtonZamenaPneumatika.isSelected()) {
                    sacuvajOvoVozilo.setDodatneServisneUsluge(dodatnaServisnaUsluga.append(radioButtonZamenaPneumatika.getText()).append(" | ").toString());
                }
                if (radioButtonKontrolaRadaMotora.isSelected()) {
                    sacuvajOvoVozilo.setDodatneServisneUsluge(dodatnaServisnaUsluga.append(" | ").append(radioButtonKontrolaRadaMotora.getText()).append(" | ").toString());
                }
                if (radioButtonCentriranjeTrapa.isSelected()) {
                    sacuvajOvoVozilo.setDodatneServisneUsluge(dodatnaServisnaUsluga.append(radioButtonCentriranjeTrapa.getText()).append(" | ").toString());
                }
                if (radioButtonProveraAkumulatora.isSelected()) {
                    sacuvajOvoVozilo.setDodatneServisneUsluge(dodatnaServisnaUsluga.append(radioButtonProveraAkumulatora.getText()).append(" | ").toString());
                }
                if (radioButtonPopravkaKaroserije.isSelected()) {
                    sacuvajOvoVozilo.setDodatneServisneUsluge(dodatnaServisnaUsluga.append(radioButtonPopravkaKaroserije.getText()).append(" | ").toString());
                }
            } else {
                sacuvajOvoVozilo.setDodatneServisneUsluge("/");
            }

            if (!txtAreaDodatneNapomene.getText().equals("Napomene za servisere...")) {
                sacuvajOvoVozilo.setNapomene(txtAreaDodatneNapomene.getText());
            } else {
                sacuvajOvoVozilo.setNapomene("/");
            }

            if (daLiJeSveOK == true) {
                try {
                    Kontroler.getInstance().sacuvajVozilo(sacuvajOvoVozilo);
                } catch (SQLException ex) {
                    Logger.getLogger(_2_PrijemNovogVozilaUServis.class.getName()).log(Level.SEVERE, null, ex);
                }

                JLabel label = new JLabel("Vozilo uspesno uneto u servis bazu!");
                label.setFont(new Font("Monospace", Font.BOLD, 15));

                Thread t1 = new Thread(new Runnable() {
                    public void run() {
                        try {
                            Thread.sleep(3000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        JOptionPane.getRootFrame().dispose();
                    }
                });
                t1.start();
                JOptionPane.showOptionDialog(null, label, cbMarkaVozila.getSelectedItem().toString(), JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, icon, new Object[]{}, null);
            }

        } else {
            JOptionPane.showMessageDialog(this, errorMessage, "GRESKA", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnPotvrdiSveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(_2_PrijemNovogVozilaUServis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(_2_PrijemNovogVozilaUServis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(_2_PrijemNovogVozilaUServis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(_2_PrijemNovogVozilaUServis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                _2_PrijemNovogVozilaUServis dialog = new _2_PrijemNovogVozilaUServis(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnOtvoriListu;
    private javax.swing.JButton btnPotvrdi;
    private javax.swing.JButton btnPotvrdiSve;
    private javax.swing.JComboBox<String> cbMarkaVozila;
    private javax.swing.JComboBox cbModelAudi;
    private javax.swing.JComboBox cbModelVW;
    private javax.swing.JComboBox cbVremePrijema;
    private javax.swing.JCheckBox checkBoxInspekcijskiServis;
    private javax.swing.JCheckBox checkBoxServisZameneUlja;
    private javax.swing.JCheckBox checkBoxVelikiServis;
    private com.toedter.calendar.JDateChooser datumPiker;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jSPDodatneNapomene;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBrojSasije;
    private javax.swing.JLabel lblBrojUnetihKaraktera;
    private javax.swing.JLabel lblDatumPrijema;
    private javax.swing.JLabel lblDodatneNapomene;
    private javax.swing.JLabel lblDodatneServisneUsluge;
    private javax.swing.JLabel lblGreskaBrojSasije;
    private javax.swing.JLabel lblGreskaKilometraza;
    private javax.swing.JLabel lblGreskaRegistarskaOznaka;
    private javax.swing.JLabel lblKilometraza;
    private javax.swing.JLabel lblMarkaVozila;
    private javax.swing.JLabel lblModelAudi;
    private javax.swing.JLabel lblModelVW;
    private javax.swing.JLabel lblPodaciOVozilu;
    private javax.swing.JLabel lblPrikaziMarkuOvde;
    private javax.swing.JLabel lblPrikaziModelOvde;
    private javax.swing.JLabel lblRedovneServisneUsluge;
    private javax.swing.JLabel lblRegistarskaOznaka;
    private javax.swing.JLabel lblSlika;
    private javax.swing.JLabel lblVremePrijema;
    private javax.swing.JPanel panelDodatneNapomene;
    private javax.swing.JPanel panelDodatneServisneUsluge;
    private javax.swing.JRadioButton radioButtonCentriranjeTrapa;
    private javax.swing.JRadioButton radioButtonKontrolaRadaMotora;
    private javax.swing.JRadioButton radioButtonPopravkaKaroserije;
    private javax.swing.JRadioButton radioButtonProveraAkumulatora;
    private javax.swing.JRadioButton radioButtonZamenaKocioneTecnosti;
    private javax.swing.JRadioButton radioButtonZamenaPneumatika;
    private javax.swing.JSlider slider;
    private javax.swing.JTextArea txtAreaDodatneNapomene;
    private javax.swing.JTextField txtBrojSasije;
    private javax.swing.JTextField txtKilometraza;
    private javax.swing.JFormattedTextField txtRegistarskaOznaka;
    // End of variables declaration//GEN-END:variables

    private void odrediVelicinuZaCB() {
        // Fiksiraj da duzina cb bude ista.
        cbMarkaVozila.setPreferredSize(new Dimension(150, 30));
        cbModelAudi.setPreferredSize(new Dimension(150, 30));
        cbModelVW.setPreferredSize(new Dimension(150, 30));
        cbVremePrijema.setPreferredSize(new Dimension(150, 30));

        // Centriraj text u svim cb.
        ((JLabel) cbMarkaVozila.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) cbModelAudi.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) cbModelVW.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel) cbVremePrijema.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void odrediMarkuVozila() {
        // Dodaj ActionListener koji osluskuje o kojoj marki vozila se radi (koji takodje postavlja i sliku).
        cbMarkaVozila.addActionListener((ActionEvent event) -> {

            JComboBox comboBox = (JComboBox) event.getSource();

            if (cbMarkaVozila.getSelectedItem().equals("Audi")) {
                lblModelAudi.setVisible(true);
                cbModelAudi.setVisible(true);
                lblModelVW.setVisible(false);
                cbModelVW.setVisible(false);

                lblSlika.setVisible(true);
                lblSlika.setIcon(pozadina_AUDI);

            } else if (cbMarkaVozila.getSelectedItem().equals("VW")) {
                lblModelVW.setVisible(true);
                cbModelVW.setVisible(true);
                lblModelAudi.setVisible(false);
                cbModelAudi.setVisible(false);

                lblSlika.setVisible(true);
                lblSlika.setIcon(pozadina_VW);

            }

        });
    }

    private void ucitajSveModele() {

        lblPrikaziMarkuOvde.setVisible(false);
        lblPrikaziModelOvde.setVisible(false);

        // Ucitaj Audi modele.
        try {
            List<ModeliAudi> listaAudiVozila = Kontroler.getInstance().ucitajSveAudiModele();

            for (ModeliAudi element : listaAudiVozila) {
                cbModelAudi.addItem(element);
            }

            // Ucitaj VW modele.
            List<ModeliVW> listaVWVozila = Kontroler.getInstance().ucitajSveVWModele();

            for (ModeliVW element : listaVWVozila) {
                cbModelVW.addItem(element);
            }

        } catch (SQLException ex) {
            Logger.getLogger(_2_PrijemNovogVozilaUServis.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void odrediVremeIDatumPostaviDugme() {

        cbVremePrijema.setVisible(false);
        lblVremePrijema.setVisible(false);
        btnPotvrdi.setVisible(false);

        lblDatumPrijema.setVisible(false);
        datumPiker.setVisible(false);
        
        JTextFieldDateEditor editor = (JTextFieldDateEditor) datumPiker.getDateEditor();
        editor.setEditable(false);

        cbMarkaVozila.addActionListener((ActionEvent event) -> {

            JComboBox comboBox = (JComboBox) event.getSource();

            if (cbMarkaVozila.getSelectedIndex() != -1) {
                cbVremePrijema.setVisible(true);
                lblVremePrijema.setVisible(true);
                lblDatumPrijema.setVisible(true);
                datumPiker.setVisible(true);
                btnPotvrdi.setVisible(true);
            }

        });
    }

    private void sakrijPocetnaPolja() {
        // Postavi modele svih vozila da budu nevidljivi kao i sliku.
        lblModelAudi.setVisible(false);
        cbModelAudi.setVisible(false);
        lblModelVW.setVisible(false);
        cbModelVW.setVisible(false);
        lblSlika.setVisible(false);
        lblSlika.setText(null);
    }

    private void odrediMinDatum() {
        datumPiker.getJCalendar().setMinSelectableDate(new Date()); // postavlja trenutni datum kao min datum
    }

    private void sakrijDodatnaPolja() {
        lblPodaciOVozilu.setVisible(false);

        slider.setVisible(false);
        lblKilometraza.setVisible(false);
        txtKilometraza.setVisible(false);
        lblGreskaKilometraza.setVisible(false);

        lblBrojSasije.setVisible(false);
        txtBrojSasije.setVisible(false);
        lblGreskaBrojSasije.setVisible(false);

        lblRegistarskaOznaka.setVisible(false);
        txtRegistarskaOznaka.setVisible(false);
        lblGreskaRegistarskaOznaka.setVisible(false);

        lblRedovneServisneUsluge.setVisible(false);
        checkBoxServisZameneUlja.setVisible(false);
        checkBoxInspekcijskiServis.setVisible(false);
        checkBoxVelikiServis.setVisible(false);

        lblDodatneServisneUsluge.setVisible(false);
        btnOtvoriListu.setVisible(false);
        panelDodatneServisneUsluge.setVisible(false);

        lblDodatneNapomene.setVisible(false);
        panelDodatneNapomene.setVisible(false);

        btnPotvrdiSve.setVisible(false);

    }

    private void prikaziDodatnaPolja() {
        lblPodaciOVozilu.setVisible(true);

        slider.setVisible(true);
        lblKilometraza.setVisible(true);
        txtKilometraza.setVisible(true);

        lblBrojSasije.setVisible(true);
        txtBrojSasije.setVisible(true);

        lblRegistarskaOznaka.setVisible(true);
        txtRegistarskaOznaka.setVisible(true);
        try {
            MaskFormatter format = new MaskFormatter("??-###-??");
            format.setPlaceholderCharacter('_');
            format.install(txtRegistarskaOznaka);
        } catch (ParseException ex) {
            Logger.getLogger(_2_PrijemNovogVozilaUServis.class.getName()).log(Level.SEVERE, null, ex);
        }

        lblRedovneServisneUsluge.setVisible(true);
        checkBoxServisZameneUlja.setVisible(true);
        checkBoxInspekcijskiServis.setVisible(true);
        checkBoxVelikiServis.setVisible(true);
        checkBoxServisZameneUlja.setRolloverIcon(info_simbol);
        checkBoxInspekcijskiServis.setRolloverIcon(info_simbol);
        checkBoxVelikiServis.setRolloverIcon(info_simbol);

        lblDodatneServisneUsluge.setVisible(true);
        btnOtvoriListu.setVisible(true);

        lblDodatneNapomene.setVisible(true);
        panelDodatneNapomene.setVisible(true);
        if (!txtAreaDodatneNapomene.getText().equals("Napomene za servisere...")) {
            lblBrojUnetihKaraktera.setText("0 / 160");
        } else {
            lblBrojUnetihKaraktera.setText("");
            txtAreaDodatneNapomene.setForeground(Color.gray);
        }

        txtAreaDodatneNapomene.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                update();
            }

            public void update() {
                lblBrojUnetihKaraktera.setText(txtAreaDodatneNapomene.getText().length() + "/ 160");
                lblBrojUnetihKaraktera.setVisible(true);
            }
        });

        btnPotvrdiSve.setVisible(true);

    }

    private void dodajHoverEfekatNaPotvrdiDugmad() {

        btnPotvrdi.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPotvrdi.setBackground(Color.GREEN);
                btnPotvrdi.setFont(new Font("Verdana", Font.BOLD, 14));
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPotvrdi.setBackground(UIManager.getColor("vrati staru boju"));
                btnPotvrdi.setFont(UIManager.getFont("vrati stari font"));
            }
        });

        btnPotvrdiSve.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPotvrdiSve.setBackground(Color.GREEN);
                btnPotvrdiSve.setFont(new Font("Verdana", Font.BOLD, 14));
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPotvrdiSve.setBackground(UIManager.getColor("vrati staru boju"));
                btnPotvrdiSve.setFont(UIManager.getFont("vrati stari font"));
            }
        });

    }

}
